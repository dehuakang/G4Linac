//##### MOMO Main program #####
//# ----------------------------------------------------------
//# Automatic creation of the main program for Momo environment.
// 2003 December, updated for  geant4.6.0
// --------------------------------------------------------------
//   momoTest2.cc generated by Geant4 Momo
//     at Sun Dec 05 14:31:43 CET 2010  


// This code implementation is the intellectual property of
// the  GEANT4 collaboration.
//
// By copying, distributing or modifying the Program (or any work
// based on the Program) you indicate your acceptance of this statement,
// and all its terms.
//
// 
#include "G4RunManager.hh"
#include "G4UImanager.hh"

// Detector geometry generated by Momo's GGE
#include "volumeConstruction.hh"
// Physics List generated by Momo's GPE
#include "physiqueList.hh"
#include "PhantomSD.hh"
// Momo's default PrimaryGeneratorAction
#include "PrimaryGeneratorAction.hh"
#include "G4SDManager.hh"
#include "globals.hh"

#ifdef G4VIS_USE
#include "G4VisExecutive.hh"
#endif

#ifdef G4UI_USE
#include "G4UIExecutive.hh"
#endif
#include "Randomize.hh" 
// MPI session
#include "G4MPImanager.hh"
#include "G4MPIsession.hh"
#include "G4UItcsh.hh"
int main(int argc,char** argv)
{
  G4String sensitiveDetectorName = "Phantom";
     
  // MPI session
  // --------------------------------------------------------------------
  // At first, G4MPImanager/G4MPIsession should be created.
  G4MPImanager* g4MPI= new G4MPImanager(argc,argv);

  // MPI session (G4MPIsession) instead of G4UIterminal
  // Terminal availability depends on your MPI implementation.
  G4MPIsession* session= g4MPI-> GetMPIsession();

  // LAM/MPI users can use G4tcsh.
  G4String prompt= "[40;01;33m";
  prompt+= "G4MPI";
  prompt+= "[40;31m(%s)[40;36m[%/][00;30m:";

  G4UItcsh* tcsh= new G4UItcsh(prompt);
  tcsh-> SetLsColor(BLUE,RED);
  session-> SetShell(tcsh);
//choose the Random engine
  CLHEP::HepRandom::setTheEngine(new CLHEP::RanecuEngine);
  G4int rank= G4MPImanager::GetManager()-> GetRank();
  G4int seed = rank*time(0);


//choose the Random engine
  CLHEP::HepRandom::setTheEngine(new CLHEP::RanecuEngine);
  CLHEP::HepRandom :: setTheSeed(seed);
  // Construct the default run manager
  G4RunManager* runManager = new G4RunManager;


  // set mandatory initialization classes
  volumeConstruction* det = new volumeConstruction(sensitiveDetectorName);
  runManager->SetUserInitialization(det);
  runManager->SetUserInitialization(new physiqueList());


  // set mandatory user action class
  runManager->SetUserAction(new PrimaryGeneratorAction());
  // set user action classes to visualise trajectories


// user application setting
  // 
  // Initialize G4 kernel
  runManager->Initialize();
 // get the pointer to the User Interface manager 
  G4UImanager * UImanager = G4UImanager::GetUIpointer();  

  if (argc!=1)   // batch mode  
    {
      G4String command = "/control/execute ";
      G4String fileName1 = argv[1];
G4String fileName;

fileName="reader.mac";
//if (rank==0) {fileName="reader0.mac" ;}
//
//if (rank==1) {fileName="reader1.mac" ;}
//
//if (rank==2) {fileName="reader2.mac" ;}
//
//if (rank==3) {fileName="reader3.mac" ;}
////if (rank==4) {fileName="reader4.mac" ;}
//
//if (rank==5) {fileName="reader5.mac" ;}
//if (rank==6) {fileName="reader.mac" ;}
//if (rank==7) {fileName="reader.mac" ;}


      UImanager->ApplyCommand(command+fileName);
    }
  else           // interactive mode : define UI session
    { 
#ifdef G4UI_USE
      G4UIExecutive * ui = new G4UIExecutive(argc,argv);
#ifdef G4VIS_USE
      UImanager->ApplyCommand("/control/execute reader.mac");     
#endif
      ui->SessionStart();
      delete ui;
#endif
     

    
}
  delete g4MPI;
  delete runManager;

  return 0;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......


